class VattAscomInterface(object):
    """
    Interface to ASCOM at VATT.
    """

    # Example:
    # http://10.0.3.25:7843/api/v1/telescope/0/declination?ClientID=1&ClientTransactionID=1234

    # the value of the keyword is the string used by ASCOM
    keywords = {
        "RA": "RightAscension",
        "DEC": "declination",
        "AIRMASS": None,
        "HA": None,
        "LST-OBS": "SiderealTime",
        "EQUINOX": None,
        "JULIAN": None,
        "ELEVAT": "Altitude",
        "AZIMUTH": "Azimuth",
        "ROTANGLE": "Position",
        "ST": "SiderealTime",
        "EPOCH": None,
        "MOTION": None,
        "FILTER": "FILTER",
    }

    comments = {
        "RA": "right ascension",
        "DEC": "declination",
        "AIRMASS": "airmass",
        "HA": "hour angle",
        "LST-OBS": "local siderial time",
        "EQUINOX": "equinox of RA and DEC",
        "JULIAN": "julian date",
        "ELEVAT": "elevation",
        "AZIMUTH": "azimuth",
        "MOTION": "telescope motion flag",
        "ROTANGLE": "IIS rotation angle",
        "ST": "local siderial time",
        "EPOCH": "equinox of RA and DEC",
        "MOTION": "motion flag",
        "FILTER": "Instrument filter",
    }
    typestrings = {
        "RA": "str",
        "DEC": "str",
        "AIRMASS": "float",
        "HA": "str",
        "LST-OBS": "str",
        "EQUINOX": "float",
        "JULIAN": "float",
        "ELEVAT": "float",
        "AZIMUTH": "float",
        "MOTION": "int",
        "BEAM": "int",
        "ROTANGLE": "float",
        "ST": "str",
        "EPOCH": "float",
        "FILTER": "str",
    }

    def __init__(self):
        """
        Initialize communication interface to telescope server.
        """

        self.host = "10.0.3.25"
        self.port = 7843
        self.client_id = 1  # Client ID
        self.client_transaction_id = 0

        self.tserver = AlpacaTelescope(f"{self.host}:{self.port}", 0, "http")

        # azcam.log(f"Connected to telescope: {self.tserver.Name}")
        # azcam.log(f"Description: {self.tserver.Description}")

        print(f"RA={self.tserver.RightAscension} DE={self.tserver.Declination}")

        return

    def command(self, command):
        """
        Sends a command to the telescope server and receives the reply.
        Opens and closes the socket each time.
        """

        # requests.packages.urllib3.disable_warnings()

        r = requests.get(command, verify=False)
        reply = r.json()["Value"]

        return reply

    def make_keyword_packet(self, keyword):
        """
        Internal Use Only.<br>
        Makes a telemetry packet for transmission to the telescope server.
        """

        # http://10.0.3.25:7843/api/v1/telescope/0/declination?ClientID=1&ClientTransactionID=1234

        self.client_transaction_id += 1

        p = [
            self.host,
            self.port,
            "api",
            "v1",
            "telescope",
            "0",
            self.keywords[keyword],
            self.client_id,
            self.client_transaction_id,
        ]
        packet = f"http://{p[0]}:{p[1]}/{p[2]}/{p[3]}/{p[4]}/{p[5]}/{p[6]}?ClientID={p[7]}&ClientTransactionID={p[8]}"

        return packet

    def parse_keyword(self, keyword, value):
        """
        Parses a telescope telemetry keyword value to proper type and formatting.
        Data returned may be of type string, integer, or float.
        """

        # parse RA and DEC specially
        if keyword == "RA":
            a = Angle(f"{value}d")
            reply = "%s:%s:%s" % (reply[0:2], reply[2:4], reply[4:])

        elif keyword == "DEC":
            a = Angle(f"{value}d")
            reply = f"{int(a.dms.d)}:{int(a.dms.m)}:{a.dms.s:.02f}"
        else:

            # convert type
            if self.typestrings[keyword] == "int":
                reply = int(reply)
            elif self.typestrings[keyword] == "float":
                reply = float(reply)

        return reply
